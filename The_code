class MicroControllerSettings:
  
    def __init__(self, min_temp, max_temp, min_hum, max_hum, min_water_level, min_moist, max_moist):
        self.min_temp = min_temp
        self.max_temp = max_temp
        self.min_hum = min_hum
        self.max_hum = max_hum
        self.min_water_level = min_water_level
        self.min_moist = min_moist
        self.max_moist = max_moist
        self.moisture_needed = False
        self.temperature_optimal = False
        self.water_needed = False
        self.humidity_optimal = False
        self.moisture_sub_optimal = False
        self.current_temp_not_optimal = False
        self.current_humidity_not_optimal = False
        self.death_imminent = False
        self.danger_moist = 10

    def calculate_moisture(self, current_moisture):
        if current_moisture =< self.min_moist:
            self.moisture_needed = True
        elif self.min_moist =< current_moisture =< self.max_moist:
            self.moisture_sub_optimal = True
        if current_moisture =< self.danger_moist:
            self.death_imminent = True

    def calculate_temperature(self, current_temperature):
        if self.min_temp =< current_temperature =< self.max_temp:
            self.temperature_optimal = True
        elif current_temperature in range((self.min_temp+2), (self.min_temp-2)) or range((self.max_temp-2), (self.max_temp+2)):
            self.current_temp_not_optimal = True

    def calculate_water_level(self, current_water_level):
        if self.min_water_level > current_water_level:
            self.water_needed = True

    def calculate_humidity(self, current_humidity):
        if self.min_hum =< current_humidity =< self.max_hum:
            self.humidity_optimal = True
        elif current_humidity in range((self.min_hum-5), (self.max_hum+5)):
            self.current_humidity_not_optimal = True


    def calculate_water_distribution(self):
        distribution = 0
        if self.water_needed == False:
            if self.moisture_needed and self.temperature_optimal and self.humidity_optimal:
                distribution = "C1: ", 25
            elif self.moisture_needed and self.temperature_optimal and self.humidity_optimal == False:
                distribution = "C2: ", 12.5
            elif self.moisture_needed and self.temperature_optimal == False and self.humidity_optimal:
                distribution = "C3: ", 12.5
            elif self.moisture_sub_optimal and self.current_temp_not_optimal and self.current_humidity_not_optimal:
                distribution = "C4: ", 12.5
            if self.death_imminent == True:
                distribution = "C5:", 37.5
            
        else:
            distribution = "C6: Water level not sufficient enough. Please refill."
        if distribution == 0:
            distribution = "The plant should not be watered"

        return "Distribution = ", distribution  # "The system will output %i mm of water" % distribution    
        


#---------------------------------------------------------------

Standard_Program = MicroControllerSettings(8, 25, 40, 100, 37.5, 20, 100)

'''
current_moisture = int(input("What is the current moisture in %? "))
current_temperature = int(input("What is the current temperature in celsius? "))
current_humidity = int(input("What is the current humidity in %? "))
current_water_level = int(input("What is the current water level in mm? "))
Standard_Program.calculate_moisture(current_moisture)
Standard_Program.calculate_humidity(current_humidity)
Standard_Program.calculate_temperature(current_temperature)
Standard_Program.calculate_water_level(current_water_level)
print(Standard_Program.calculate_water_distribution())
'''


#----Unit testing-----------------------------------------------------------------------

#Condition 1 (optimal conditions for watering)
current_moisture = 15
current_temperature = 22
current_humidity = 44
current_water_level = 55
Standard_Program.calculate_moisture(current_moisture)
Standard_Program.calculate_humidity(current_humidity)
Standard_Program.calculate_temperature(current_temperature)
Standard_Program.calculate_water_level(current_water_level)
print("Condition 1:")
print(Standard_Program.calculate_water_distribution())

Standard_Program = MicroControllerSettings(8, 25, 40, 100, 37.5, 20, 100)

#Condition 2 (non optimal humidity)
current_moisture = 15
current_temperature = 22
current_humidity = 39
current_water_level = 55
Standard_Program.calculate_moisture(current_moisture)
Standard_Program.calculate_humidity(current_humidity)
Standard_Program.calculate_temperature(current_temperature)
Standard_Program.calculate_water_level(current_water_level)
print("Condition 2:")
print(Standard_Program.calculate_water_distribution())

Standard_Program = MicroControllerSettings(8, 25, 40, 100, 37.5, 20, 100)

#Condition 3 (non optimal temp)
current_moisture = 15
current_temperature = 5
current_humidity = 45
current_water_level = 55
Standard_Program.calculate_moisture(current_moisture)
Standard_Program.calculate_humidity(current_humidity)
Standard_Program.calculate_temperature(current_temperature)
Standard_Program.calculate_water_level(current_water_level)
print("Condition 3:")
print(Standard_Program.calculate_water_distribution())

Standard_Program = MicroControllerSettings(8, 25, 40, 100, 37.5, 20, 100)

#Condition 4 (pre-emptive - to prevent worst case scenario - before it goes too bad)
current_moisture = 25
current_temperature = 7
current_humidity = 39
current_water_level = 55
Standard_Program.calculate_moisture(current_moisture)
Standard_Program.calculate_humidity(current_humidity)
Standard_Program.calculate_temperature(current_temperature)
Standard_Program.calculate_water_level(current_water_level)
print("Condition 4:")
print(Standard_Program.calculate_water_distribution())

Standard_Program = MicroControllerSettings(8, 25, 40, 100, 37.5, 20, 100)

#Condition 5 ( moisture lower than 10%)
current_moisture = 5
current_temperature = 22
current_humidity = 39
current_water_level = 55
Standard_Program.calculate_moisture(current_moisture)
Standard_Program.calculate_humidity(current_humidity)
Standard_Program.calculate_temperature(current_temperature)
Standard_Program.calculate_water_level(current_water_level)
print("Condition 5:")
print(Standard_Program.calculate_water_distribution())

Standard_Program = MicroControllerSettings(8, 25, 40, 100, 37.5, 20, 100)

#Condition 6 (water barrel less than 37.5mm water)
current_moisture = 15
current_temperature = 22
current_humidity = 39
current_water_level = 20
Standard_Program.calculate_moisture(current_moisture)
Standard_Program.calculate_humidity(current_humidity)
Standard_Program.calculate_temperature(current_temperature)
Standard_Program.calculate_water_level(current_water_level)
print("Condition 6:")
print(Standard_Program.calculate_water_distribution())

Standard_Program = MicroControllerSettings(8, 25, 40, 100, 37.5, 20, 100)

#Condition 7 (plant is happy)
current_moisture = 40
current_temperature = 22
current_humidity = 39
current_water_level = 55
Standard_Program.calculate_moisture(current_moisture)
Standard_Program.calculate_humidity(current_humidity)
Standard_Program.calculate_temperature(current_temperature)
Standard_Program.calculate_water_level(current_water_level)
print("Condition 7:")
print(Standard_Program.calculate_water_distribution())



#Next iteration: while loop, import maths to add random in order for values to change.
